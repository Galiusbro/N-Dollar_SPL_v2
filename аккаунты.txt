## 1. Локальные аккаунты (используются только внутри своей программы)

### Admin Control
- **AdminConfig** - Хранит конфигурацию и адреса программ экосистемы
  - Seed: `["admin_config", authority]`
  - Использование: Центральный конфигурационный аккаунт для всей экосистемы

### N-Dollar Token
- **AdminAccount** - Управляет минтом и эмиссией токена N-Dollar
  - Seed: `["admin_account", mint]`
  - Использование: Контролирует эмиссию и управление токеном

### Bonding Curve
- **CalculatePrice** - Структура для расчёта цены (только для чтения)
  - Использование: Локальный контекст для получения информации о ценах

### Trading Exchange
- **TradingExchange** - Основное хранилище информации о бирже
  - Seed: `["trading_exchange", authority]`
  - Использование: Управляет обменными операциями

### Liquidity Manager
- **LiquidityManager** - Управляет ликвидностью и курсами обмена
  - Seed: `["liquidity_manager", authority]`
  - Использование: Обеспечивает ликвидность для обмена SOL/N-Dollar
- **ManageLiquidity** - Контекст для управления ликвидностью
  - Использование: Позволяет владельцу добавлять/удалять ликвидность

### Genesis (создание мемкоинов)
- **CoinData** - Хранит информацию о созданной монете
  - Seed: `["coin_data", mint]`
  - Использование: Содержит метаданные и информацию о мемкоине
- **ReferralData** (локальное для Genesis) - Информация о реферальной ссылке
  - Seed: `["referral_data", mint]`
  - Использование: Локальное управление реферальной программой для монеты

### Referral System
- **ReferralSystem** - Хранит общую информацию о реферальной системе
  - Seed: `["referral_system", authority]`
  - Использование: Управляет общей реферальной программой
- **CheckReferralStatus** - Контекст для проверки статуса реферальной системы
  - Использование: Позволяет проверить статус реферала

## 2. Общие аккаунты (передаются между программами)

### Токены и минты
- **N-Dollar Mint** - Mint-аккаунт токена N-Dollar
  - Использование: 
    - Передаётся между всеми программами (admin_control, bonding-curve, trading-exchange, liquidity-manager)
    - Является ключевой валютой экосистемы

- **Token Accounts** - Аккаунты токенов пользователей
  - Использование:
    - Передаются между программами для трансферов токенов
    - Используются во всех программах как источник или назначение платежей

### Bonding Curve
- **BondingCurve** - Хранит параметры и состояние бондинговой кривой
  - Seed: `["bonding_curve", coin_mint]`
  - Использование:
    - Создаётся в genesis при создании монеты
    - Используется в trading-exchange для расчёта курса обмена
    - Содержит ссылку на пул ликвидности

### Referral System
- **ReferralData** - Информация о реферальной программе конкретной монеты
  - Seed: `["referral_data", coin_mint]`
  - Использование:
    - Создаётся в genesis
    - Используется в referral-system для начисления вознаграждений
    
- **UserData** - Информация о пользователе, подключённом через реферал
  - Seed: `["user_data", user, coin_mint]` 
  - Использование:
    - Используется между referral-system и другими программами
    - Содержит информацию о связях рефералов и вознаграждениях

### Общие SOL аккаунты
- **Pool SOL Account** - Хранит SOL для ликвидности
  - Seed: `["pool_sol", liquidity_manager]`
  - Использование:
    - Создаётся в liquidity-manager
    - Используется в trading-exchange через CPI

## Схема взаимодействия программ через аккаунты

1. **admin_control → все программы**
   - `AdminConfig` - хранит адреса всех программ
   - Все программы должны получать авторизацию через админ

2. **n-dollar-token → все программы**
   - `Mint` - все программы используют N-Dollar как базовую валюту
   - Токен используется для оплаты комиссий, создания монет и т.д.

3. **genesis → bonding-curve**
   - При создании новой монеты создаётся `BondingCurve` и минт
   - Вызывает initialize_bonding_curve через CPI

4. **genesis → referral-system**
   - Создаёт `ReferralData` для новой монеты
   - Вызывает initialize_referral_system через CPI

5. **trading-exchange → bonding-curve и liquidity-manager**
   - Использует данные `BondingCurve` для расчётов
   - Вызывает функции `liquidity-manager` для обеспечения свопов SOL/N-Dollar

6. **liquidity-manager → n-dollar-token**
   - Управляет пулами ликвидности для N-Dollar

## Особенности архитектуры

1. **PDA-модель** - Все основные аккаунты созданы как PDA с предсказуемыми адресами
2. **Cross-Program Invocation (CPI)** - Многие операции требуют взаимодействия между программами
3. **Токен-центричная система** - N-Dollar выступает как центральная валюта для всей экосистемы
4. **Иерархическая структура** - admin_control контролирует авторизацию и адреса программ, остальные программы используют эти данные

Эта карта аккаунтов даёт ясное представление о том, как программы проекта N-Dollar взаимодействуют между собой и какие аккаунты участвуют в этих взаимодействиях.



<think>Для анализа аккаунтов в проекте мне нужно систематически проверить каждую программу, особое внимание уделив:

1. Правильности подписей аккаунтов
2. Корректности PDA (Program Derived Addresses) и их seeds
3. Правильности чтения и записи данных
4. Безопасности межпрограммных взаимодействий (CPI)

Начну с просмотра основных программ и их структур аккаунтов, затем проанализирую конкретные инструкции.</think># Анализ аккаунтов в проекте N-Dollar

Я проведу детальный анализ аккаунтов во всех программах проекта, проверяя корректность подписей, seeds для PDA, мутабельность и передачу данных.

## Начнем с изучения программы admin_control

Read file: programs/admin_control/src/lib.rs

Read file: programs/n-dollar-token/src/lib.rs

Read file: programs/n-dollar-token/src/lib.rs

Read file: programs/bonding-curve/src/lib.rs

Read file: programs/bonding-curve/src/lib.rs

Read file: programs/trading-exchange/src/lib.rs

Read file: programs/liquidity-manager/src/lib.rs

Read file: programs/liquidity-manager/src/lib.rs

Read file: programs/referral-system/src/lib.rs

Read file: programs/genesis/src/lib.rs
## Анализ безопасности аккаунтов в проекте N-Dollar

После тщательного изучения программ проекта, могу представить анализ аккаунтов с точки зрения правильности их использования, подписей, seeds и передачи данных.

### 1. Программа `admin_control`

#### Корректность PDA и seeds:
✅ Правильное использование PDA для `admin_config` с seeds `[b"admin_config".as_ref(), authority.key().as_ref()]`
✅ Правильная передача bump в аккаунт для последующего использования

#### Подписи аккаунтов:
✅ Корректное требование подписи `authority` для всех административных функций
✅ Правильные проверки авторизации через `constraint = admin_config.authority == authority.key()`

#### Замечания и рекомендации:
❗ **Отсутствует реальное использование CPI**: Предоставляемые функции `verify_program_authorization` и `get_fee_basis_points` не используются другими программами
❗ **Фиксированный размер массива авторизованных программ**: Ограничение в 10 программ может стать проблемой при расширении

### 2. Программа `n-dollar-token`

#### Корректность PDA и seeds:
✅ Правильное использование PDA для `admin_account` с seeds `[b"admin_account".as_ref(), mint.key().as_ref()]`
✅ Корректное хранение и проверка bump

#### Подписи аккаунтов:
✅ Все административные функции требуют подпись от авторизованного пользователя
✅ Правильное использование PDA для подписи в `mint_supply`

#### Замечания и рекомендации:
❗ **Отсутствие проверки времени**: Проверка интервала минтинга выполняется, но нет защиты от атак на время
❗ **Необходимость дополнительной авторизации**: Функции заморозки и разморозки должны иметь дополнительные уровни защиты

### 3. Программа `bonding-curve`

#### Корректность PDA и seeds:
✅ Правильное использование PDA для `bonding_curve` с seeds `[b"bonding_curve".as_ref(), coin_mint.key().as_ref()]`
✅ Корректная работа с bump для создания подписанных транзакций

#### Подписи аккаунтов:
✅ Правильная проверка подписей в `TradeToken` для покупки и продажи токенов
✅ Корректное использование подписи PDA для минтинга токенов

#### Замечания и рекомендации:
❗ **Расчеты в функциях**: Сложные математические расчеты могут быть выделены в отдельную библиотеку
❗ **Отсутствие проверки на admin_control**: Нет связи с центральной программой admin_control

### 4. Программа `trading-exchange`

#### Корректность аккаунтов:
✅ Правильные проверки на соответствие аккаунтов в инструкциях
✅ Корректные ограничения на владельцев токен-аккаунтов

#### Замечания и рекомендации:
❗ **Дублирование структуры BondingCurve**: Повторяется определение из программы bonding-curve
❗ **Отсутствие PDA**: Не видно использования PDA для контрольных аккаунтов программы

### 5. Программа `liquidity-manager`

#### Корректность PDA и seeds:
✅ Правильное использование PDA для `liquidity_manager` с seeds `[b"liquidity_manager".as_ref(), authority.key().as_ref()]`
✅ Правильное использование PDA для `pool_sol_account` с seeds `[b"pool_sol".as_ref(), liquidity_manager.key().as_ref()]`

#### Подписи аккаунтов:
✅ Правильное требование подписи в управляющих инструкциях
✅ Корректное использование seeds для создания подписи PDA

#### Замечания и рекомендации:
❗ **Проверка на манипуляции с ценой**: Необходимо добавить защиту от манипуляций при свопах
❗ **Ограничение на размер свопа**: Рекомендуется добавить лимиты на размер транзакций

### 6. Программа `referral-system`

#### Корректность PDA и seeds:
✅ Правильное использование PDA для `referral_data` с seeds `[b"referral_data".as_ref(), referral_data.coin_mint.as_ref()]`
✅ Правильное использование PDA для `user_data` с seeds `[b"user_data".as_ref(), user.key().as_ref(), referral_data.coin_mint.as_ref()]`

#### Подписи аккаунтов:
✅ Корректное требование подписи для регистрации и начисления вознаграждений
✅ Правильные проверки авторизации при выполнении операций

#### Замечания и рекомендации:
❗ **Проверка на существование токен-аккаунтов**: Следует добавить явную проверку на существование токен-аккаунтов
❗ **Защита от двойной регистрации**: Нет явной проверки, что пользователь не зарегистрирован дважды

### 7. Программа `genesis`

#### Корректность PDA и seeds:
✅ Правильное использование PDA для `coin_data` с seeds `[b"coin_data".as_ref(), mint.key().as_ref()]`
✅ Правильное использование PDA для `referral_data` с seeds `[b"referral_data".as_ref(), mint.key().as_ref()]`
✅ Корректное использование PDA для подписания операций с токенами

#### Подписи аккаунтов:
✅ Правильное требование подписи создателя монеты
✅ Корректные проверки авторизации в операциях

#### Замечания:
❗ **Отсутствие ограничений на имя и символ**: Стоит добавить проверки на длину и содержимое имени и символа токена
❗ **Отсутствие разделения ролей**: Создатель монеты имеет полный контроль над всеми аспектами

## Общие замечания по проекту:

1. **Отсутствие централизованной авторизации**: 
   - Большинство программ не взаимодействуют с `admin_control` для авторизации операций
   - Каждая программа выполняет собственные проверки авторизации

2. **Дублирование структур данных**:
   - Некоторые структуры (например, BondingCurve) дублируются в разных программах
   - Это может привести к рассинхронизации при обновлении

3. **Недостаточное использование CPI**:
   - Межпрограммные вызовы реализованы не в полной мере
   - Большинство программ работают относительно изолированно

4. **Безопасность PDA и Seeds**:
   - В целом, правильное использование PDA и seeds
   - Корректное хранение и применение bump для подписей PDA

5. **Рекомендации по улучшению**:
   - Унифицировать систему авторизации через `admin_control`
   - Добавить версионирование аккаунтов для упрощения миграций
   - Усилить защиту от атак на время и фронтраннинга
   - Добавить многоподписное управление для критичных операций
   - Добавить механизм обновления программ

## Заключение

В целом, аккаунты в проекте N-Dollar используются правильно с точки зрения подписей, seeds для PDA и передачи данных. Основной проблемой является слабая интеграция между программами и отсутствие централизованной авторизации через `admin_control`. Устранение указанных замечаний и рекомендаций позволит повысить безопасность и удобство сопровождения проекта в будущем.
