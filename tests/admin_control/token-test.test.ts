import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Awesome } from "../../target/types/awesome";
import { expect } from "chai";
import {
  TOKEN_PROGRAM_ID,
  getAssociatedTokenAddress,
  getAccount,
} from "@solana/spl-token";
import { PublicKey } from "@solana/web3.js";
import { createUmi } from "@metaplex-foundation/umi-bundle-defaults";
import { publicKey } from "@metaplex-foundation/umi";
import {
  mplTokenMetadata,
  fetchMetadata,
} from "@metaplex-foundation/mpl-token-metadata";
import * as borsh from "@coral-xyz/borsh"; // Make sure to have this dependency

describe("Token Creation and Minting Tests", () => {
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Umi, –∏—Å–ø–æ–ª—å–∑—É—è RPC –∏–∑ Anchor
  const umi = createUmi(provider.connection.rpcEndpoint).use(
    mplTokenMetadata()
  );

  const program = anchor.workspace.Awesome as Program<Awesome>;
  const wallet = provider.wallet;

  const TOKEN_NAME = "Test Token";
  const TOKEN_SYMBOL = "TEST";
  const TOKEN_URI = "https://test.com/token.json";
  const TOKEN_DECIMALS = 9;
  const MINT_AMOUNT = new anchor.BN(1000000000);

  before(async () => {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –º–∏–Ω—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤");
    const metadataProgramId = new PublicKey(
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    );
    const accountInfo = await provider.connection.getAccountInfo(
      metadataProgramId
    );
    if (!accountInfo?.executable) {
      throw new Error(
        "‚ùå Metaplex Token Metadata Program –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ"
      );
    }
    console.log("‚úÖ Metaplex Token Metadata Program –Ω–∞–π–¥–µ–Ω");
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const METADATA_LAYOUT = borsh.struct([
    borsh.u8("key"),
    borsh.publicKey("updateAuthority"),
    borsh.publicKey("mint"),
    borsh.str("name"),
    borsh.str("symbol"),
    borsh.str("uri"),
    borsh.u16("sellerFeeBasisPoints"),
    borsh.option(
      borsh.vec(
        borsh.struct([
          borsh.str("address"),
          borsh.bool("verified"),
          borsh.u8("share"),
        ])
      ),
      "creators"
    ),
  ]);

  function decodeMetadataAccount(data: Buffer) {
    try {
      const decoded = METADATA_LAYOUT.decode(data);
      return {
        name: decoded.name,
        symbol: decoded.symbol,
        uri: decoded.uri,
        updateAuthority: decoded.updateAuthority.toString(),
        mint: decoded.mint.toString(),
        sellerFeeBasisPoints: decoded.sellerFeeBasisPoints,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–µ—Ç–∞–ª–∏):", error);
      return null;
    }
  }

  it("–î–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–Ω—Ç–∏–Ω–≥", async () => {
    console.log("\nüìù –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");

    const mint = anchor.web3.Keypair.generate();
    console.log(`üîë Mint address: ${mint.publicKey.toString()}`);

    const [metadataPda] = anchor.web3.PublicKey.findProgramAddressSync(
      [
        Buffer.from("metadata"),
        new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s").toBuffer(),
        mint.publicKey.toBuffer(),
      ],
      new PublicKey("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")
    );
    console.log(`üìã Metadata address: ${metadataPda.toString()}`);

    console.log("\n‚è≥ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω...");
    const createTx = await program.methods
      .createToken(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_URI, TOKEN_DECIMALS)
      .accounts({
        mint: mint.publicKey,
        metadata: metadataPda,
        authority: wallet.publicKey,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: anchor.web3.SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
        tokenMetadataProgram: new PublicKey(
          "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
        ),
      } as any)
      .signers([mint])
      .rpc();

    console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", createTx);

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log("\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...");
    await provider.connection.confirmTransaction(createTx, "confirmed");
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

    console.log("\nüìù –®–∞–≥ 2: –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤");
    const tokenAccount = await getAssociatedTokenAddress(
      mint.publicKey,
      wallet.publicKey
    );
    console.log(`üí∞ Token Account address: ${tokenAccount.toString()}`);

    console.log(`\n‚è≥ –ú–∏–Ω—Ç–∏–º ${MINT_AMOUNT.toString()} —Ç–æ–∫–µ–Ω–æ–≤...`);
    const mintTx = await program.methods
      .mintTokens(MINT_AMOUNT)
      .accounts({
        mint: mint.publicKey,
        tokenAccount,
        authority: wallet.publicKey,
        tokenProgram: TOKEN_PROGRAM_ID,
        associatedTokenProgram: new PublicKey(
          "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        ),
        systemProgram: anchor.web3.SystemProgram.programId,
        rent: anchor.web3.SYSVAR_RENT_PUBKEY,
      } as any)
      .rpc();

    console.log("‚úÖ –ú–∏–Ω—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", mintTx);

    // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log("\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–∏–Ω—Ç–∏–Ω–≥–∞...");
    await provider.connection.confirmTransaction(mintTx, "confirmed");
    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–∏–Ω—Ç–∏–Ω–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log("\nüìù –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞");
    const tokenAccountInfo = await provider.connection.getTokenAccountBalance(
      tokenAccount
    );
    console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${tokenAccountInfo.value.amount} —Ç–æ–∫–µ–Ω–æ–≤`);

    expect(tokenAccountInfo.value.amount).to.equal(MINT_AMOUNT.toString());
    console.log("‚úÖ –ë–∞–ª–∞–Ω—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞
    const accountInfo = await getAccount(provider.connection, tokenAccount);
    expect(accountInfo.mint.toString()).to.equal(mint.publicKey.toString());
    expect(accountInfo.owner.toString()).to.equal(wallet.publicKey.toString());
    expect(accountInfo.amount.toString()).to.equal(MINT_AMOUNT.toString());
    console.log("‚úÖ –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤–µ—Ä–Ω—ã");

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    console.log("\n‚è≥ –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...");
    await new Promise((resolve) => setTimeout(resolve, 5000)); // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 5 —Å–µ–∫—É–Ω–¥

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    console.log("\nüìù –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞");
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SDK –º–µ—Ç–æ–¥ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
      const metadataAccount = await fetchMetadata(
        umi,
        publicKey(metadataPda.toString())
      );

      console.log("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ SDK");
      console.log(`üìå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ${metadataAccount.name}`);
      console.log(`üìå –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞: ${metadataAccount.symbol}`);
      console.log(`üìå URI –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataAccount.uri}`);
    } catch (error) {
      console.log(
        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SDK:",
        error.message
      );

      // –ü–ª–∞–Ω –ë: –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö –≤—Ä—É—á–Ω—É—é
      console.log("\nüìù –ß—Ç–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...");
      const metadataAccountInfo = await provider.connection.getAccountInfo(
        metadataPda
      );

      if (metadataAccountInfo) {
        console.log(
          "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:",
          metadataAccountInfo.data.length
        );

        // –í—ã–≤–µ–¥–µ–º –ø–µ—Ä–≤—ã–µ 64 –±–∞–π—Ç–∞ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        console.log("üìä –ü–µ—Ä–≤—ã–µ 64 –±–∞–π—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (hex):");
        const hexPrefix = metadataAccountInfo.data.slice(0, 64).toString("hex");
        console.log(hexPrefix);

        // –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log("\nüìù –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é...");
        try {
          const decodedData = decodeMetadataAccount(metadataAccountInfo.data);
          if (decodedData) {
            console.log("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã:");
            console.log("üìå –î–µ—Ç–∞–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:");
            console.log("   - –ù–∞–∑–≤–∞–Ω–∏–µ:", decodedData.name);
            console.log("   - –°–∏–º–≤–æ–ª:", decodedData.symbol);
            console.log("   - URI:", decodedData.uri);
            console.log("   - Update Authority:", decodedData.updateAuthority);
            console.log("   - Mint:", decodedData.mint);
            console.log(
              "   - Seller Fee Basis Points:",
              decodedData.sellerFeeBasisPoints
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            expect(decodedData.name.replace(/\0/g, "")).to.equal(TOKEN_NAME);
            expect(decodedData.symbol.replace(/\0/g, "")).to.equal(
              TOKEN_SYMBOL
            );
            expect(decodedData.uri.replace(/\0/g, "")).to.equal(TOKEN_URI);
            expect(decodedData.mint).to.equal(mint.publicKey.toString());
            console.log("‚úÖ –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–µ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º");
          } else {
            console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ");
          }
        } catch (decodeError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:", decodeError);
          // –í—ã–≤–æ–¥–∏–º –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          console.log("\nüìä –î–∞–º–ø –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (hex):");
          console.log(metadataAccountInfo.data.toString("hex"));
        }
      } else {
        console.log("‚ùå –ê–∫–∫–∞—É–Ω—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      }
    }
  });
});
