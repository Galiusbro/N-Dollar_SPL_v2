//context/admin.rs

use anchor_lang::prelude::*;
use anchor_spl::token::{Mint, Token, TokenAccount};
use crate::state::*;

#[derive(Accounts)]
pub struct AdminFunction<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    
    #[account(
        mut,
        constraint = mint.key() == admin_account.mint
    )]
    pub mint: Account<'info, Mint>,
    
    #[account(
        seeds = [b"admin_account".as_ref(), mint.key().as_ref()],
        bump = admin_account.bump,
        constraint = admin_account.authority == authority.key()
    )]
    pub admin_account: Account<'info, AdminAccount>,
    
    #[account(
        mut,
        constraint = token_account.mint == mint.key()
    )]
    pub token_account: Account<'info, TokenAccount>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct AdminFunctionWithMultisig<'info> {
    #[account(mut)]
    pub authority: Signer<'info>,
    
    #[account(
        mut,
        constraint = mint.key() == admin_account.mint
    )]
    pub mint: Account<'info, Mint>,
    
    #[account(
        seeds = [b"admin_account".as_ref(), mint.key().as_ref()],
        bump = admin_account.bump,
        constraint = admin_account.authority == authority.key()
    )]
    pub admin_account: Account<'info, AdminAccount>,
    
    #[account(
        mut,
        constraint = token_account.mint == mint.key()
    )]
    pub token_account: Account<'info, TokenAccount>,
    
    // Дополнительные подписанты (опциональные)
    pub additional_signer1: Option<Signer<'info>>,
    pub additional_signer2: Option<Signer<'info>>,
    
    pub token_program: Program<'info, Token>,
    pub system_program: Program<'info, System>,
}


// context/initialize.rs
